using System;
using System.IO;
using System.Linq;

namespace laba4
{
    internal class Program
    {
        

        public static StreamWriter sw = new StreamWriter("output.txt");
        static void Main(string[] args)
        {
            double[] L = new double[7] {0.1, 0.1, 0.1, 0.2, 0.1, 0.2, 0.2 };

            var R1 = new[,] {
                {1, 0.6, 0.2, 0.7, 0.3, 0.2},
                {0.5, 1, 0.7, 0.8, 0.2, 0.2},
                {0.7, 0.5, 1, 0.2, 0.4, 0.9},
                {0.3, 0.3, 0.1, 1, 0.8, 0.9},
                {0.5, 0.5, 0.6, 0.2, 1, 0.8},
                {0.3, 0.2, 0.3, 0.6, 0.9, 1}
            };

            var R2 = new[,] {
                {1, 0.5, 0.6, 0.2, 0.3, 0.7},
                {0.4, 1, 0.8, 0.6, 0.2, 0.6},
                {0.3, 0.1, 1, 0.7, 0.7, 0.6},
                {0.2, 0.7, 0.2, 1, 0.4, 0.2},
                {0.2, 0.1, 0.5, 0.5, 1, 0.9},
                {0.8, 0.3, 0.4, 0.2, 0.3, 1}
            };

            var R3 = new[,] {
                {1,0.7,0.7,0.7,0.6,0.4},
                {0.6,1,0.5,0.7,0.2,0.7},
                {0.3,0.5,1,0.7,0.7,0.9},
                {0.8,0.8,0.6,1,0.7,0.1},
                {0.3,0.9,0.5,0.7,1,0.3},
                {0.9,0.7,0.7,0.8,0.8,1}
            };

            var R4 = new[,] {
                {1,0.2,0.6,0.7,0.4,0.4},
                {0.2,1,0.7,0.7,0.9,0.3},
                {0.7,0.3,1,0.4,0.7,0.3},
                {0.5,0.3,0.9,1,0.5,0.4},
                {0.4,0.6,0.8,0.9,1,0.9},
                {0.6,0.5,0.5,0.7,0.5,1}
            };

            var R5 = new[,] {
                {1,0.8,0.5,0.8,0.7,0.6},
                {0.3,1,0.8,0.5,0.2,0.5},
                {0.8,0.5,1,0.6,0.4,0.3},
                {0.9,0.4,0.7,1,0.5,0.1},
                {0.8,0.5,0.2,0.4,1,0.5},
                {0.2,0.5,0.2,0.5,0.8,1}
            };

            var R6 = new[,] {
                {1,0.1,0.4,0.3,0.3,0.7},
                {0.4,1,0.5,0.3,0.4,0.3},
                {0.2,0.6,1,0.8,0.8,0.2},
                {0.8,0.5,0.5,1,0.5,0.6},
                {0.7,0.1,0.7,0.6,1,0.8},
                {0.9,0.4,0.3,0.1,0.8,1}
            };

            var R7 = new[,] {
                {1,0.7,0.7,0.3,0.4,0.6},
                {0.1,1,0.6,0.7,0.5,0.9},
                {0.7,0.5,1,0.2,0.7,0.6},
                {0.3,0.7,0.7,1,0.4,0.2},
                {0.4,0.3,0.6,0.2,1,0.4},
                {0.7,0.2,0.9,0.5,0.5,1}
            };

            var R_all = new[,] {
                {1,0.6,0.2,0.7,0.3,0.2,0.5,1,0.7,0.8,0.2,0.2,0.7,0.5,1,0.2,0.4,0.9,0.3,0.3,0.1,1,0.8,0.9,0.5,0.5,0.6,0.2,1,0.8,0.3,0.2,0.3,0.6,0.9,1},
                {1,0.5,0.6,0.2,0.3,0.7,0.4,1,0.8,0.6,0.2,0.6,0.3,0.1,1,0.7,0.7,0.6,0.2,0.7,0.2,1,0.4,0.2,0.2,0.1,0.5,0.5,1,0.9,0.8,0.3,0.4,0.2,0.3,1},
                {1,0.7,0.7,0.7,0.6,0.4,0.6,1,0.5,0.7,0.2,0.7,0.3,0.5,1,0.7,0.7,0.9,0.8,0.8,0.6,1,0.7,0.1,0.3,0.9,0.5,0.7,1,0.3,0.9,0.7,0.7,0.8,0.8,1},
                {1,0.2,0.6,0.7,0.4,0.4,0.2,1,0.7,0.7,0.9,0.3,0.7,0.3,1,0.4,0.7,0.3,0.5,0.3,0.9,1,0.5,0.4,0.4,0.6,0.8,0.9,1,0.9,0.6,0.5,0.5,0.7,0.5,1},
                {1,0.8,0.5,0.8,0.7,0.6,0.3,1,0.8,0.5,0.2,0.5,0.8,0.5,1,0.6,0.4,0.3,0.9,0.4,0.7,1,0.5,0.1,0.8,0.5,0.2,0.4,1,0.5,0.2,0.5,0.2,0.5,0.8,1},
                {1,0.1,0.4,0.3,0.3,0.7,0.4,1,0.5,0.3,0.4,0.3,0.2,0.6,1,0.8,0.8,0.2,0.8,0.5,0.5,1,0.5,0.6,0.7,0.1,0.7,0.6,1,0.8,0.9,0.4,0.3,0.1,0.8,1},
                {1,0.7,0.7,0.3,0.4,0.6,0.1,1,0.6,0.7,0.5,0.9,0.7,0.5,1,0.2,0.7,0.6,0.3,0.7,0.7,1,0.4,0.2,0.4,0.3,0.6,0.2,1,0.4,0.7,0.2,0.9,0.5,0.5,1}
            };

            double[,] Q1 = new double[6, 6];
            for (int i = 0; i < 36; i++)
            {
                double min = 1;
                for (int j = 0; j < 7; j++)
                {
                    min = min < R_all[j, i] ? min : R_all[j, i];
                }
                Q1[i < 6 ? 0 : (int)(i / 6), i % 6] = min;
            }

            double[,] Q1_T = new double[6, 6];
            double[,] Q1_S = new double[6, 6];

            for (int i = 0; i < 6; i++)
                for (int j = 0; j < 6; j++)
                    Q1_T[j, i] = Q1[i, j];

            for (int i = 0; i < 6; i++)
                for (int j = 0; j < 6; j++)
                    Q1_S[i, j] = Q1[i, j] - Q1_T[i, j];

            double[] max_Q1 = new double[6];
            double[] mu_Q1 = new double[6];

            for (int i = 0; i < 6; i++)
            {
                double maxValue = 0;
                for (int j = 0; j < 6; j++)
                {
                    maxValue = maxValue > Q1_S[j, i] ? maxValue : Q1_S[j, i];
                }
                max_Q1[i] = maxValue;
                mu_Q1[i] = 1 - max_Q1[i];
            }



            double[,] Q2 = new double[6, 6];

            for (int i = 0; i < 36; i++)
            {
                var value = .0;
                for (int j = 0; j < 7; j++)
                {
                    value += R_all[j, i] * L[j];
                }
                Q2[i < 6 ? 0 : (int)(i / 6), i % 6] = value;
            }

            double[,] Q2_T = new double[6, 6];
            double[,] Q2_S = new double[6, 6];

            for (int i = 0; i < 6; i++)
                for (int j = 0; j < 6; j++)
                    Q2_T[j, i] = Q2[i, j];

            for (int i = 0; i < 6; i++)
                for (int j = 0; j < 6; j++)
                    Q2_S[i, j] = Q2[i, j] - Q2_T[i, j];

            double[] max_Q2 = new double[6];
            double[] mu_Q2 = new double[6];

            for (int i = 0; i < 6; i++)
            {
                double maxValue = 0;
                for (int j = 0; j < 6; j++)
                {
                    maxValue = maxValue > Q2_S[j, i] ? maxValue : Q2_S[j, i];
                }
                max_Q2[i] = maxValue;
                mu_Q2[i] = 1 - max_Q2[i];
            }

            double[] Mu_min = new double[6];
            var max = .0;
            var index = 0;

            for(int i = 0; i < 6; i++)
            {
                var min = mu_Q1[i] > mu_Q2[i] ? mu_Q2[i] : mu_Q1[i];
                Mu_min[i] = min;
            }
            max = Mu_min.Max();
            index = Array.IndexOf(Mu_min, max) + 1;

            sw.WriteLine("Оптимальная альтернатива x" + index + ", μ н.д.(x" + index + ") = " + max);
            sw.Close();
        }
    }
}
